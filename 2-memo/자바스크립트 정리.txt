변수와 상수 (variable and const)
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
변수(variable): 이름이 붙는 저장소

예약어/키워드
.let	- 변할 수 있는 변수		= let name = 'joji'
.const	- 변할 수 없는 변수 상수	= const NAME = 'joji'

식별자 : 사용시 카멜케이스
변수명은 문자, 숫자, 기호($, _)만 사용 가능하며 첫글자는 숫자가 될수없음
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


자료형(data-type)
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
변수를 문자열 중간에 삽입
alert( `Hello, ${name}!` ); // Hello, John!

typeof 연산자
- 자료형에 따라 처리 방식을 다르게 하고 싶거나,
   변수의 자료형을 빠르게 알아내고자 할 때 유용합니다.
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


alert, prompt, confirm
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
prompt: 입력값을 받을 때 사용할 수 있음
= let 변수명 : prompt(제목, 기본값)

confirm: 예 / 아니오 형태의 질문을 할 때 사용
= let 변수명 : confirm('내용')
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


기본 연산자와 수학
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
덧셈 연산자 +,
뺄셈 연산자 -,
곱셈 연산자 *,
나눗셈 연산자 /,
나머지 연산자 %,
거듭제곱 연산자 **

문자열 "" 일때 +나 number() 을 넣어주면 숫자열로 변환됨

쉼표연산자: 여러 표현식을 한줄에 보여줄수 있지만 마지막 결과만 반환된다.
ex) let i = (1+2, 2+3, 5+5) // 10 마지막(5+5)의결과
but) let i = 1+2, 2+3, 5+5 // 가로가 없으면 1+2 = 3의 결과만 반환된다. 
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


비교연산자
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
==: 자동으로 형변환한 후 비교함
"0" == 0 문자열0과 숫자열 0 을 비교해도 true
===: 정확한 비교를 원하면
"0" == 0 자동으로 형변환이 되지않아 false
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


★ if문
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
조건식이 treu이면 실행문이 실행됨
조건식이 fasle이면 실행문이 실행 안됨
"", 0, undefined, null, NaN == false

조건식 ? 조건식이 true일 때 반환값 : 조건식이 false일 때 반환값
ex) let accessAllowed = (age > 18) ? true : false;
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


논리연산자
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
||(or) : 왼쪽항이 true면 왼쪽항은 반환, false면 오른쪽항을 반환
console.log(true || false); // true
console.log(false || true); // true

&&(and) : 모든항이 true면 true, 하나라도 false이면 false
	 왼쪽 항이 true로 판별되면 오른쪽 항을 반환
	 왼쪽 항이 false로 판변되면 왼쪽 항을 반환
console.log(5 && 0); // 0 
console.log(0 || 5); // 0

!(not) : 논리값을 반대로 반환함
console.log(!true) = false
console.log(!false) = true

!! : not 연산을 두번 붙이면 변수의 논리값(boolean)을 추출할 수 있다.
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


null 병합 연산자
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
||는 첫 번째 truthy 값을 반환합니다.
??는 첫 번째 정의된(defined) 값을 반환합니다.
ex)	let height = 0;
	alert(height || 100); // 100
	alert(height ?? 100); // 0
	height가 정확하게 null이나 undefined일 경우에만 100이 됩니다. 
	예시에선 height에 0이라는 값을 할당했기 때문에 얼럿창엔 0이 출력됩니다.
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


★ while과 for 반복문
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
while (조건식) {}
ex)	let i = 0;
	while (i < 3) {
	 console.log(i)
	 i++
	}
for (1.초기화 2.조건문 3.실행 4.스텝)
ex)	for(let i = 0; i < 3; i++);
	console.log(i)

break 조건 순간부터 반복문 종료
continue 조건 순간에만 중지시키고 반복문은 다시 계속 실행
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


switch 문
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
복수의 if 조건문을 switch 문으로 바꿀수 있다.
ex)	let a = +prompt('a?', '');	let a = +prompt('a?', '');

	if (a == 0) {		switch (a) {

	  alert( 0 );		case 0:
	}				alert( 0 );
	if (a == 1) {			break;
	  alert( 1 );
	}			case 1:
					alert( 1 );
	if (a == 2 || a == 3) {		break;
	  alert( '2,3' );		case 2:
	}			case 3:
					alert('2,3');
					break;
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


★function
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
function : 일련된 공통의 작업을 처리하기 위해서 연관된 코드들을 모아 놓은 자료형

함수 선언식
ex)	function gugudan(){
		console.log('3x1 = 3');
		console.log('3x2 = 6');
		console.log('3x3 = 9');
	}
	gugudan(); = 함수 호출

함수 표현식
ex)	let gugudan = function gugudan(){
		console.log('3x1 = 3')
		console.log('3x2 = 6')
		console.log('3x3 = 9')
	};
	gugudan(); = 변수의 이름으로 함수 호출

함수의 인수와 매개변수 이해
ex)	function fruit(name){
		console.log(name);
	}
	fruit('banana');
	fruit('orange');
	
배열사용
	function fruitArr(arr)매개변수{
		console.log(arr[0]+"는 "+ arr[1] +"원 입니다.");
	}
	fruitArr(['banana'], [2000]);인수

객체사용
	function fruitobj(obj){
		console.log(obj.name +"은"+ obj.price +"원 입니다.");
	}
	fruitArr({name: 'apple', price:3000});

return문
	function sum(num1,num2){
		return num1 + num2;
	}
	let sumResult1 = sum(10, 20);
	let sumResult2 = sum(20, 30);
	
	let sumResult = sumresult1 + sumresult2; //80

화살표 함수
	키워드와 식별자를 제거 () => {}

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


배열
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
배열의 크기 : length
배열에 원소 추가 : push();,
복수의원소를 배열을 추가하려면 : concat([]);
배열 시작점에 원소를 추가하려면 : unshift();
배열 중간에 원소를 추가하려면 : splice(1,0,'d'); 1번 인덱스 앞에 d를 넣는다
			   splice(1,1,'x','y'); 1번 인덱스를 지우고 x, y를 넣는다

배열 시작점에 원소를 제거하려면 : shift();
배열 끝지점에 원소를 제거하려면 : pop();

정렬
sort();
역순 정렬
reverse();
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――


객체(object)
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
연관배열(array)
맵(map)
딕셔너리(dictionary)
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――






